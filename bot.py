import os
import threading
import asyncio
from flask import Flask, request, jsonify
from telegram import Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
import logging

TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")
SERVER_URL = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
PORT = int(os.environ.get("SERVER_PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")
if not CHAT_ID:
    raise ValueError("CHAT_ID environment variable is not set!")
if not SERVER_URL:
    raise ValueError("RAILWAY_PUBLIC_DOMAIN environment variable is not set!")

global_bot = Bot(token=TOKEN)
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def format_json_as_html(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –≤ HTML-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram.
    """
    if not data:
        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π JSON –ø–µ—Ä–µ–¥–∞–Ω –≤ format_json_as_html()")
        return ""

    if "text" in data:
        logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(data['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        return data["text"]

    formatted_text = ""
    for key, value in data.items():
        if isinstance(value, dict):
            formatted_text += f"<b>{key}:</b>\n"
            for sub_key, sub_value in value.items():
                formatted_text += f"  <i>{sub_key}:</i> {sub_value}\n"
        elif isinstance(value, list):
            formatted_text += f"<b>{key}:</b> " + ", ".join(str(item) for item in value) + "\n"
        else:
            formatted_text += f"<b>{key}:</b> {value}\n"

    logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ HTML, –¥–ª–∏–Ω–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    return formatted_text.strip()

@app.route('/post/<topic_id>', methods=['POST'])
def post_to_topic(topic_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ General –∏–ª–∏ –≤ —Ç–æ–ø–∏–∫.
    """
    data = request.get_json()
    if not data:
        logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: –ø—É—Å—Ç–æ–π JSON")
        return jsonify({"error": "Invalid JSON"}), 400

    message = format_json_as_html(data)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)
        thread_id = None

        if topic_id == "general":
            sent_message = loop.run_until_complete(
                local_bot.send_message(
                    chat_id=CHAT_ID,
                    text=message,
                    parse_mode=ParseMode.HTML
                )
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ General-—á–∞—Ç")
        else:
            try:
                thread_id = int(topic_id)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: topic_id '{topic_id}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                return jsonify({"error": "topic_id must be an integer or 'general'"}), 400

            sent_message = loop.run_until_complete(
                local_bot.send_message(
                    chat_id=CHAT_ID,
                    text=message,
                    parse_mode=ParseMode.HTML,
                    message_thread_id=thread_id
                )
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {thread_id}")

        return jsonify({
            "success": "Message sent",
            "message_id": sent_message.message_id,
            "thread_id": thread_id
        })

    except Exception as e:
        error_message = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_message}")
        return jsonify({"error": error_message}), 500

    finally:
        loop.close()


@app.route('/edit/<message_id>', methods=['POST'])
def edit_message(message_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    """
    data = request.get_json()
    if not data or "text" not in data:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω 'text' (message_id={message_id})")
        return jsonify({"error": "Invalid JSON, 'text' is required"}), 400

    new_message = format_json_as_html(data)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)
        loop.run_until_complete(
            local_bot.edit_message_text(
                chat_id=CHAT_ID,
                message_id=int(message_id),
                text=new_message,
                parse_mode=ParseMode.HTML
            )
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
        return jsonify({"success": "Message edited", "message_id": message_id})

    except Exception as e:
        error_message = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {error_message}")
        return jsonify({"error": error_message}), 500

    finally:
        loop.close()


@app.route('/delete/<message_id>', methods=['POST'])
def delete_message(message_id):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ General-—á–∞—Ç–∞.
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)
        loop.run_until_complete(
            local_bot.delete_message(
                chat_id=CHAT_ID,
                message_id=int(message_id)
            )
        )
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ General-—á–∞—Ç–∞")
        return jsonify({"success": f"Message {message_id} deleted"})
    
    except Exception as e:
        error_message = str(e)
        if "message to delete not found" in error_message:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return jsonify({"warning": f"Message {message_id} already deleted or not found"}), 200
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {error_message}")
            return jsonify({"error": error_message}), 500
    finally:
        loop.close()

async def start(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è General-—á–∞—Ç–∞.
    """
    if update.message and update.message.message_thread_id:
        thread_id = update.message.message_thread_id
        await update.message.reply_text(
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¢–û–ü–ò–ö: {SERVER_URL}/post/{thread_id}\n"
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {SERVER_URL}/edit/<message_id>"
        )
        logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id}")
    else:
        await update.message.reply_text(
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–±—â–∏–π —á–∞—Ç: {SERVER_URL}/post/general\n"
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {SERVER_URL}/edit/<message_id>\n"
            f"–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {SERVER_URL}/delete/<message_id>"
        )
        logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è General-—á–∞—Ç–∞")


def run_flask():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.run_polling()
