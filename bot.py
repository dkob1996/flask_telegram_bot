import os
import threading
import asyncio
from flask import Flask, request, jsonify
from telegram import Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
import logging
import base64

TOKEN = os.environ.get("BOT_TOKEN")
SERVER_URL = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
PORT = int(os.environ.get("SERVER_PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")
if not SERVER_URL:
    raise ValueError("RAILWAY_PUBLIC_DOMAIN environment variable is not set!")

global_bot = Bot(token=TOKEN)
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ª–æ–≥–æ–≤
logging.getLogger("httpx").setLevel(logging.WARNING)
    
def log_and_notify(level, message):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    - –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ–ø–∏–∫–µ, –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫.
    - –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Ç–µ –±–µ–∑ —Ç–æ–ø–∏–∫–∞, –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –≤ —á–∞—Ç.

    level: —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (logging.ERROR, logging.WARNING)
    message: —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    """
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
    log_type = "error" if level == logging.ERROR else "warning"

    if level == logging.ERROR:
        logger.error(message)
    else:
        logger.warning(message)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏
    logging_chat_id = os.environ.get("LOGGING_CHAT_ID")  # –ß–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if not logging_chat_id:
        logger.warning("‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ: LOGGING_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    # –ö–æ–¥–∏—Ä—É–µ–º chat_id (–∏ topic_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    encoded_logging_chat = encode_params(logging_chat_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    log_label = "üî¥ ERROR" if log_type == "error" else "üü° WARNING"
    log_message = f"{log_label}\nüìù {message}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        local_bot = Bot(token=TOKEN)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id –∏ topic_id, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫
        chat_id, topic_id = decode_params(encoded_logging_chat)

        if topic_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª –æ—Ç—Ç—É–¥–∞
            loop.run_until_complete(
                local_bot.send_message(
                    chat_id=chat_id,
                    message_thread_id=topic_id,
                    text=log_message,
                    parse_mode=ParseMode.HTML
                )
            )
            logger.info(f"‚úÖ –õ–æ–≥ ({log_type.upper()}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫ {topic_id} (—á–∞—Ç {chat_id})")
        else:
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª –∏–∑ —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∞–º —á–∞—Ç
            loop.run_until_complete(
                local_bot.send_message(
                    chat_id=chat_id,
                    text=log_message,
                    parse_mode=ParseMode.HTML
                )
            )
            logger.info(f"‚úÖ –õ–æ–≥ ({log_type.upper()}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ ({log_type.upper()}) –≤ Telegram: {str(e)}")

    finally:
        loop.close()


def format_json_as_html(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –≤ HTML-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram.
    –£–±–∏—Ä–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, None –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    """
    if not data:
        log_and_notify(logging.WARNING, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π JSON –ø–µ—Ä–µ–¥–∞–Ω –≤ format_json_as_html()")
        return ""

    if "text" in data and isinstance(data["text"], str) and data["text"].strip():
        logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(data['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        return data["text"].strip()

    formatted_text = ""
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    def process_value(key, value, depth=0):
        indent = "  " * depth  # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        if value is None or value == "":
            return ""  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
        if isinstance(value, dict):
            sub_text = f"<b>{key}:</b>\n"
            for sub_key, sub_value in value.items():
                processed = process_value(sub_key, sub_value, depth + 1)
                if processed:
                    sub_text += f"{indent}  <i>{sub_key}:</i> {processed}\n"
            return sub_text.strip()

        elif isinstance(value, list):
            list_items = [str(item).strip() for item in value if item]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
            return f"<b>{key}:</b> " + ", ".join(list_items)

        else:
            return f"<b>{key}:</b> {str(value).strip()}"

    for key, value in data.items():
        processed = process_value(key, value)
        if processed:
            formatted_text += processed + "\n"

    formatted_text = formatted_text.strip()

    if not formatted_text:
        log_and_notify(logging.WARNING, "‚ö†Ô∏è JSON —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
        return ""

    logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ HTML, –¥–ª–∏–Ω–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    return formatted_text

def encode_params(chat_id, topic_id=None):
    """
    –ö–æ–¥–∏—Ä—É–µ—Ç chat_id –∏ topic_id –≤ Base64.
    - –ï—Å–ª–∏ topic_id —É–∫–∞–∑–∞–Ω, –∫–æ–¥–∏—Ä—É–µ–º chat_id + topic_id (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫).
    - –ï—Å–ª–∏ topic_id –ù–ï —É–∫–∞–∑–∞–Ω, –∫–æ–¥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û chat_id (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞).
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –∏ topic_id –≤ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∏ int)
        chat_id = str(chat_id).strip()
        topic_id = str(topic_id).strip() if topic_id is not None else None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ chat_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º
        if not chat_id.lstrip("-").isdigit():
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id: {chat_id}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        raw_string = f"{chat_id}:{topic_id}" if topic_id else chat_id
        encoded_string = base64.urlsafe_b64encode(raw_string.encode()).decode()

        logger.info(f"‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: chat_id={chat_id}, topic_id={topic_id if topic_id else 'None'} ‚Üí {encoded_string}")
        return encoded_string

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: chat_id={chat_id}, topic_id={topic_id if topic_id else 'None'} ‚Üí {str(e)}"
        log_and_notify(logging.ERROR, error_message)
        return None


def decode_params(encoded_string):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Base64 –≤ chat_id –∏ topic_id.
    - –ï—Å–ª–∏ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –î–í–ê –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (chat_id:topic_id), —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–∞.
    - –ï—Å–ª–∏ –û–î–ò–ù –ø–∞—Ä–∞–º–µ—Ç—Ä (chat_id), –∑–Ω–∞—á–∏—Ç, topic_id –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è.
    - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, None).
    """
    if not encoded_string:
        log_and_notify(logging.WARNING, "‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ decode_params()")
        return None, None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º Base64
        padded_encoded = encoded_string + "=" * (-len(encoded_string) % 4)  # –î–µ–ª–∞–µ–º –¥–ª–∏–Ω—É –∫—Ä–∞—Ç–Ω–æ–π 4
        decoded = base64.urlsafe_b64decode(padded_encoded).decode().strip()

        if ":" in decoded:
            chat_id, topic_id = decoded.split(":", 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º split –Ω–∞ 2 —á–∞—Å—Ç–∏
        else:
            chat_id, topic_id = decoded, None  # –ï—Å–ª–∏ topic_id –Ω–µ—Ç

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ chat_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º (Telegram chat_id –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ)
        if not chat_id.lstrip("-").isdigit():
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id: {chat_id}")

        logger.info(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω chat_id={chat_id}, topic_id={topic_id if topic_id else 'None'}")
        return chat_id, topic_id

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64 ({encoded_string}): {str(e)}"
        log_and_notify(logging.ERROR, error_message)
        return None, None



@app.route('/post/<encoded_params>', methods=['POST'])
def post_to_chat(encoded_params):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ —Ç–æ–ø–∏–∫.
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å—ã
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /post/{encoded_params}")
        return jsonify({"error": "Method Not Allowed"}), 405
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id –∏ topic_id
    chat_id, topic_id = decode_params(encoded_params)
    if not chat_id:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
    data = request.get_json()
    if not data:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: –ø—É—Å—Ç–æ–π JSON (chat_id={chat_id})")
        return jsonify({"error": "Invalid JSON"}), 400

    message = format_json_as_html(data)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (General –∏–ª–∏ —Ç–æ–ø–∏–∫)
    thread_id = None
    if topic_id and topic_id.lower() != "general":
        if topic_id.isdigit():
            thread_id = int(topic_id)
        else:
            log_and_notify(logging.WARNING, f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π topic_id '{topic_id}' (chat_id={chat_id})")
            return jsonify({"error": "Invalid topic_id"}), 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)

        if thread_id is None:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ General
            sent_message = loop.run_until_complete(
                local_bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.HTML)
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ General-—á–∞—Ç {chat_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–ø–∏–∫
            sent_message = loop.run_until_complete(
                local_bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.HTML, message_thread_id=thread_id)
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {thread_id} (—á–∞—Ç {chat_id})")

        return jsonify({
            "success": "Message sent",
            "message_id": sent_message.message_id,
            "chat_id": chat_id,
            "thread_id": thread_id if thread_id else None
        })

    except Exception as e:
        log_and_notify(logging.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")
        return jsonify({"error": str(e)}), 500

    finally:
        loop.close()


@app.route('/edit/<encoded_params>/<message_id>', methods=['POST'])
def edit_message(encoded_params, message_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ —Ç–æ–ø–∏–∫–µ.
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å—ã
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /edit/{encoded_params}/{message_id}")
        return jsonify({"error": "Method Not Allowed"}), 405

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id (topic_id –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    chat_id, _ = decode_params(encoded_params)
    if not chat_id:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º message_id
    if not message_id.isdigit():
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π message_id '{message_id}' (chat_id={chat_id})")
        return jsonify({"error": "Invalid message_id"}), 400

    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
    data = request.get_json()
    if not data or "text" not in data:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'text' (message_id={message_id}, chat_id={chat_id})")
        return jsonify({"error": "Invalid JSON, 'text' is required"}), 400

    new_message = format_json_as_html(data)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)

        loop.run_until_complete(
            local_bot.edit_message_text(
                chat_id=chat_id,
                message_id=int(message_id),
                text=new_message,
                parse_mode=ParseMode.HTML
            )
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        return jsonify({"success": "Message edited", "message_id": message_id})

    except Exception as e:
        log_and_notify(logging.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
        return jsonify({"error": str(e)}), 500

    finally:
        loop.close()


@app.route('/delete/<encoded_params>/<message_id>', methods=['POST'])
def delete_message(encoded_params, message_id):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å—ã
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /delete/{encoded_params}/{message_id}")
        return jsonify({"error": "Method Not Allowed"}), 405

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id (topic_id –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    chat_id, _ = decode_params(encoded_params)
    if not chat_id:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º message_id
    if not message_id.isdigit():
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π message_id '{message_id}' (chat_id={chat_id})")
        return jsonify({"error": "Invalid message_id"}), 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)

        loop.run_until_complete(
            local_bot.delete_message(
                chat_id=chat_id,
                message_id=int(message_id)
            )
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        return jsonify({"success": f"Message {message_id} deleted"})

    except Exception as e:
        error_message = str(e)
        if "message to delete not found" in error_message:
            log_and_notify(logging.WARNING, f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}.")
            return jsonify({"warning": f"Message {message_id} already deleted or not found"}), 200
        else:
            log_and_notify(logging.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {error_message}")
            return jsonify({"error": error_message}), 500

    finally:
        loop.close()


@app.route('/get/<encoded_params>/<message_id>', methods=['GET'])
def get_message_text(encoded_params, message_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –ø–æ message_id.
    """
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id (topic_id –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    chat_id, _ = decode_params(encoded_params)
    if not chat_id:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º message_id
    if not message_id.isdigit():
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π message_id '{message_id}' (chat_id={chat_id})")
        return jsonify({"error": "Invalid message_id"}), 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        local_bot = Bot(token=TOKEN)

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ (Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
        chat = loop.run_until_complete(local_bot.get_chat(chat_id))

        if not chat:
            log_and_notify(logging.WARNING, f"‚ö†Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return jsonify({"error": "Chat not found"}), 404

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –º–µ—Ç–æ–¥, forward_message –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        message_text = f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ API."  
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è API Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}.")

        return jsonify({"text": message_text})

    except Exception as e:
        error_message = str(e)
        if "message to get not found" in error_message:
            log_and_notify(logging.WARNING, f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            return jsonify({"error": "Message not found"}), 404
        else:
            log_and_notify(logging.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {error_message}")
            return jsonify({"error": error_message}), 500

    finally:
        loop.close()


@app.route('/log/<log_type>/<encoded_chat>', methods=['POST'])
def log_message(log_type, encoded_chat):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –æ—Ç Google Apps Script –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç/—Ç–æ–ø–∏–∫.
    - –ï—Å–ª–∏ –ª–æ–≥ –ø—Ä–∏—à–µ–ª –∏–∑ —Ç–æ–ø–∏–∫–∞ ‚Üí –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫.
    - –ï—Å–ª–∏ —Ç–æ–ø–∏–∫–∞ –Ω–µ—Ç ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –≤ —á–∞—Ç.
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å—ã
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /log/{log_type}/{encoded_chat}")
        return jsonify({"error": "Method Not Allowed"}), 405

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id –∏ topic_id (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    chat_id, topic_id = decode_params(encoded_chat)
    if not chat_id:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è chat_id ({encoded_chat})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
    data = request.get_json()
    if not data or "message" not in data:
        log_and_notify(logging.WARNING, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –ø—É—Å—Ç–æ–π JSON (chat_id={chat_id})")
        return jsonify({"error": "Invalid JSON, 'message' is required"}), 400

    log_text = format_json_as_html(data)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        local_bot = Bot(token=TOKEN)

        # –ï—Å–ª–∏ –ª–æ–≥ –ø—Ä–∏—à–µ–ª –∏–∑ —Ç–æ–ø–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —ç—Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫
        log_label = "üî¥ ERROR" if log_type.lower() == "error" else "üü° WARNING"
        log_message_text = f"{log_label}\nüìù {log_text}"

        if topic_id:
            sent_message = loop.run_until_complete(
                local_bot.send_message(
                    chat_id=chat_id,
                    message_thread_id=topic_id,
                    text=log_message_text,
                    parse_mode=ParseMode.HTML
                )
            )
            logger.info(f"‚úÖ –õ–æ–≥ ({log_type.upper()}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫ {topic_id} (—á–∞—Ç {chat_id})")
        else:
            sent_message = loop.run_until_complete(
                local_bot.send_message(
                    chat_id=chat_id,
                    text=log_message_text,
                    parse_mode=ParseMode.HTML
                )
            )
            logger.info(f"‚úÖ –õ–æ–≥ ({log_type.upper()}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

        return jsonify({"success": "Log sent", "message_id": sent_message.message_id})

    except Exception as e:
        log_and_notify(logging.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ ({log_type.upper()}) –≤ —á–∞—Ç {chat_id}: {str(e)}")
        return jsonify({"error": str(e)}), 500

    finally:
        loop.close()


async def start(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üîπ /commands - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
        "üîπ /logging_commands - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n",
        parse_mode=ParseMode.HTML
    )
    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.effective_user.username} –≤—ã–∑–≤–∞–ª /start")

async def commands(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    """
    if not update.message:
        return  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, callback-–∑–∞–ø—Ä–æ—Å)

    user = update.effective_user
    chat_id = str(update.message.chat_id)
    thread_id = update.message.message_thread_id
    username = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()

    encoded_general = encode_params(chat_id, "general")
    encoded_topic = encode_params(chat_id, str(thread_id)) if thread_id else None
    encoded_chat = encode_params(chat_id)

    if encoded_topic:
        await update.message.reply_text(
            f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫: \n{SERVER_URL}/post/{encoded_topic}\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{SERVER_URL}/edit/{encoded_chat}/<message_id>\n"
            f"üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n{SERVER_URL}/get/{encoded_chat}/<message_id>\n"
        )
        logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id} –≤ —á–∞—Ç–µ {chat_id}")
    else:
        await update.message.reply_text(
            f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç: \n{SERVER_URL}/post/{encoded_general}\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: \n{SERVER_URL}/edit/{encoded_chat}/<message_id>\n"
            f"üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{SERVER_URL}/delete/{encoded_chat}/<message_id>\n"
            f"üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n{SERVER_URL}/get/{encoded_chat}/<message_id>\n"
        )
        logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è General-—á–∞—Ç–∞ {chat_id}")

async def logging_commands(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.
    –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ —ç—Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫.
    –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –≤ –æ–±—â–µ–º —á–∞—Ç–µ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ —Å–∞–º —á–∞—Ç.
    """
    if not update.message:
        return

    user = update.effective_user
    chat_id = str(update.message.chat_id)
    thread_id = update.message.message_thread_id  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ —Ç–æ–ø–∏–∫–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    username = f"@{user.username}" if user.username else f"{user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}"

    # –ö–æ–¥–∏—Ä—É–µ–º chat_id –∏ topic_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if thread_id:
        encoded_logging_chat = encode_params(chat_id, str(thread_id))  # –ö–æ–¥–∏—Ä—É–µ–º —Å topic_id
    else:
        encoded_logging_chat = encode_params(chat_id)  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ chat_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(
        f"üìå <b>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b>\n\n"
        f"üî¥ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å ERROR-–ª–æ–≥:</b>\n"
        f"{SERVER_URL}/log/error/{encoded_logging_chat}\n\n"
        f"üü° <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å WARNING-–ª–æ–≥:</b>\n"
        f"{SERVER_URL}/log/warning/{encoded_logging_chat}\n\n"
        f"üì¢ –õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è {'–≤ —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫' if thread_id else '–≤ —ç—Ç–æ—Ç —á–∞—Ç'}.",
        parse_mode=ParseMode.HTML
    )


    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {'—Ç–æ–ø–∏–∫–µ ' + str(thread_id) if thread_id else 'General-—á–∞—Ç–µ'} (—á–∞—Ç {chat_id})")



def run_flask():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("commands", commands))
    application.add_handler(CommandHandler("logging_commands", logging_commands))
    application.add_handler(CommandHandler("start", start))
    application.run_polling()
