import os
import threading
import asyncio
from flask import Flask, request, jsonify
from telegram import Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
import logging
import base64

TOKEN = os.environ.get("BOT_TOKEN")
SERVER_URL = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
PORT = int(os.environ.get("SERVER_PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set!")
if not SERVER_URL:
    raise ValueError("RAILWAY_PUBLIC_DOMAIN environment variable is not set!")

global_bot = Bot(token=TOKEN)
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ª–æ–≥–æ–≤
logging.getLogger("httpx").setLevel(logging.WARNING)


def format_json_as_html(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –≤ HTML-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram.
    """
    if not data:
        logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π JSON –ø–µ—Ä–µ–¥–∞–Ω –≤ format_json_as_html()")
        return ""

    if "text" in data:
        logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(data['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        return data["text"]

    formatted_text = ""
    for key, value in data.items():
        if isinstance(value, dict):
            formatted_text += f"<b>{key}:</b>\n"
            for sub_key, sub_value in value.items():
                formatted_text += f"  <i>{sub_key}:</i> {sub_value}\n"
        elif isinstance(value, list):
            formatted_text += f"<b>{key}:</b> " + ", ".join(str(item) for item in value) + "\n"
        else:
            formatted_text += f"<b>{key}:</b> {value}\n"

    logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ HTML, –¥–ª–∏–Ω–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    return formatted_text.strip()

def encode_params(chat_id, topic_id=None):
    """
    –ö–æ–¥–∏—Ä—É–µ—Ç chat_id –∏ topic_id –≤ Base64.
    - –ï—Å–ª–∏ topic_id —É–∫–∞–∑–∞–Ω, –∫–æ–¥–∏—Ä—É–µ–º chat_id + topic_id (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π).
    - –ï—Å–ª–∏ topic_id –ù–ï —É–∫–∞–∑–∞–Ω, –∫–æ–¥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û chat_id (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞).
    """
    if topic_id is not None:
        raw_string = f"{chat_id}:{topic_id}"  # –ö–æ–¥–∏—Ä—É–µ–º chat_id + topic_id
    else:
        raw_string = chat_id  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ chat_id

    return base64.urlsafe_b64encode(raw_string.encode()).decode()


def decode_params(encoded_string):
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Base64 –≤ chat_id –∏ topic_id.
    - –ï—Å–ª–∏ –≤ –∫–æ–¥–µ –î–í–ê –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (chat_id:topic_id), —Ç–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –û–±–∞.
    - –ï—Å–ª–∏ –≤ –∫–æ–¥–µ –û–î–ò–ù –ø–∞—Ä–∞–º–µ—Ç—Ä (chat_id), –∑–Ω–∞—á–∏—Ç, topic_id –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è.
    """
    try:
        decoded = base64.urlsafe_b64decode(encoded_string).decode()
        parts = decoded.split(":")

        if len(parts) == 2:
            return parts[0], parts[1]  # chat_id, topic_id
        elif len(parts) == 1:
            return parts[0], None  # chat_id, –±–µ–∑ topic_id

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64 ({encoded_string}): {str(e)}")
        return None, None


@app.route('/post/<encoded_params>', methods=['POST'])
def post_to_chat(encoded_params):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ —Ç–æ–ø–∏–∫.
    """
    # –ï—Å–ª–∏ Telegram –¥–µ–ª–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /post/{chat_id}/{topic_id}")
        return jsonify({"error": "Method Not Allowed"}), 405
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    chat_id, topic_id = decode_params(encoded_params)
    if not chat_id:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
    data = request.get_json()
    if not data:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: –ø—É—Å—Ç–æ–π JSON (chat_id={chat_id})")
        return jsonify({"error": "Invalid JSON"}), 400

    message = format_json_as_html(data)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥—ë—Ç –≤ General –∏–ª–∏ —Ç–æ–ø–∏–∫
    thread_id = None
    if topic_id and topic_id.lower() != "general":
        try:
            thread_id = int(topic_id)
        except ValueError:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: topic_id '{topic_id}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (chat_id={chat_id})")
            return jsonify({"error": "Invalid topic_id"}), 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)

        if thread_id is None:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ General
            sent_message = loop.run_until_complete(
                local_bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.HTML)
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ General-—á–∞—Ç {chat_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–ø–∏–∫
            sent_message = loop.run_until_complete(
                local_bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.HTML, message_thread_id=thread_id)
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {thread_id} (—á–∞—Ç {chat_id})")

        return jsonify({
            "success": "Message sent",
            "message_id": sent_message.message_id,
            "chat_id": chat_id,
            "thread_id": thread_id if thread_id else None
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")
        return jsonify({"error": str(e)}), 500

    finally:
        loop.close()



@app.route('/edit/<encoded_params>/<message_id>', methods=['POST'])
def edit_message(encoded_params, message_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ —Ç–æ–ø–∏–∫–µ.
    """
    # –ï—Å–ª–∏ Telegram –¥–µ–ª–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /edit/{chat_id}/{message_id}")
        return jsonify({"error": "Method Not Allowed"}), 405
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id (topic_id –Ω–µ –Ω—É–∂–µ–Ω)
    chat_id, _ = decode_params(encoded_params)
    if not chat_id:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
    data = request.get_json()
    if not data or "text" not in data:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω 'text' (message_id={message_id}, chat_id={chat_id})")
        return jsonify({"error": "Invalid JSON, 'text' is required"}), 400

    new_message = format_json_as_html(data)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)

        loop.run_until_complete(
            local_bot.edit_message_text(
                chat_id=chat_id,
                message_id=int(message_id),
                text=new_message,
                parse_mode=ParseMode.HTML
            )
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        return jsonify({"success": "Message edited", "message_id": message_id})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
        return jsonify({"error": str(e)}), 500
    finally:
        loop.close()




@app.route('/delete/<encoded_params>/<message_id>', methods=['POST'])
def delete_message(encoded_params, message_id):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.
    """
    # –ï—Å–ª–∏ Telegram –¥–µ–ª–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if request.method == "GET":
        logger.info(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /delete/{chat_id}/{message_id}")
        return jsonify({"error": "Method Not Allowed"}), 405
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id (topic_id –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
    chat_id, _ = decode_params(encoded_params)
    if not chat_id:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        local_bot = Bot(token=TOKEN)

        loop.run_until_complete(
            local_bot.delete_message(
                chat_id=chat_id,
                message_id=int(message_id)
            )
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        return jsonify({"success": f"Message {message_id} deleted"})

    except Exception as e:
        error_message = str(e)
        if "message to delete not found" in error_message:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}.")
            return jsonify({"warning": f"Message {message_id} already deleted or not found"}), 200
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {error_message}")
            return jsonify({"error": error_message}), 500
    finally:
        loop.close()



@app.route('/get/<encoded_params>/<message_id>', methods=['GET'])
def get_message_text(encoded_params, message_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –ø–æ message_id.
    """
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º chat_id (topic_id –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
    chat_id, _ = decode_params(encoded_params)
    if not chat_id:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({encoded_params})")
        return jsonify({"error": "Invalid parameters"}), 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        local_bot = Bot(token=TOKEN)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        message = loop.run_until_complete(
            local_bot.forward_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=int(message_id)
            )
        )

        return jsonify({"text": message.text})

    except Exception as e:
        error_message = str(e)
        if "message to get not found" in error_message:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            return jsonify({"error": "Message not found"}), 404
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {error_message}")
            return jsonify({"error": error_message}), 500

    finally:
        loop.close()



async def start(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
    –¢–µ–ø–µ—Ä—å chat_id –∏ topic_id –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ Base64.
    - –û—Ç–ø—Ä–∞–≤–∫–∞: chat_id + topic_id (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π)
    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ chat_id (–µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è General –∏ —Ç–æ–ø–∏–∫–æ–≤)
    """
    user = update.effective_user
    chat_id = update.message.chat_id
    thread_id = update.message.message_thread_id
    username = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()

    # –ö–æ–¥–∏—Ä—É–µ–º chat_id –∏ topic_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    encoded_general = encode_params(chat_id, "general")  # –î–ª—è General-—á–∞—Ç–∞
    encoded_topic = encode_params(chat_id, str(thread_id)) if thread_id else None  # –î–ª—è —Ç–æ–ø–∏–∫–∞

    # –ö–æ–¥–∏—Ä—É–µ–º chat_id –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    encoded_chat = encode_params(chat_id)  # –ï–¥–∏–Ω—ã–π –∫–æ–¥ –¥–ª—è General –∏ —Ç–æ–ø–∏–∫–æ–≤

    if encoded_topic:
        await update.message.reply_text(
            f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫: \n{SERVER_URL}/post/{encoded_topic}\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{SERVER_URL}/edit/{encoded_chat}/<message_id>\n"
            f"üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{SERVER_URL}/delete/{encoded_chat}/<message_id>\n"
            f"üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n{SERVER_URL}/get/{encoded_chat}/<message_id>\n"
        )
        logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id} –≤ —á–∞—Ç–µ {chat_id}")
    else:
        await update.message.reply_text(
            f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç: \n{SERVER_URL}/post/{encoded_general}\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: \n{SERVER_URL}/edit/{encoded_chat}/<message_id>\n"
            f"üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{SERVER_URL}/delete/{encoded_chat}/<message_id>\n"
            f"üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n{SERVER_URL}/get/{encoded_chat}/<message_id>\n"
        )
        logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ –¥–ª—è General-—á–∞—Ç–∞ {chat_id}")


def run_flask():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.run_polling()
